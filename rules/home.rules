//TIMERS
var Timer timer
val String text = "Hello world"
var DecimalType volumetv 

rule "Update Standby Switch"
when
    Item Start changed to ON
then
    sendCommand(Standby, ON)
end

rule "Update Volume Tv"
when
    Item VolumeTV changed
then
    var volumetv = VolumeTV.state
    var sourceTv = Source.state
    logInfo("openhab", "Volume changed to = " + volumetv)
    logInfo("openhab", "Source changed to = " + sourceTv)
end

rule "Show pattern color"
when
    Item colorSettings changed 
then
    logInfo("openhab", "Color = " + colorSettings.state.toString)
end

rule "Send UDP message"
when 
    Item Start changed to ON
then
    //sendCommand(UDPSend, text)
    logInfo("openhab", "send message "+ text)
end

rule "Receive UDP message"
when
    Item UDPReceive changed 
then
    //var String receiveMSG
    //receiveMSG = UDPReceive.state.toString()
    //logInfo("openhab", "UDP Received message: "+ receiveMSG)
    //sendCommand(UDPSend, receiveMSG)
end


rule "Start Pattern"
when
    Item startPattern changed to ON
then
    val int ledTV = 8
    val int lenPat = 8
    var iter = ledTV + lenPat
    logInfo("openhab", "beginning of rule, iter = " + iter) 
    //sendCommand(AmbilightAll, "0,0,100")
    
    var i = 1
    var j = 1
    timer = createTimer(now, [ |
        if(i <= iter){
            if (i <= ledTV) {
                switch(i) {
                    case 1: {   //sendCommand(AmbilightPixelLeft1, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString) 
                        }
                    case 2: {
                                //sendCommand(AmbilightPixelLeft2, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 3: {
                                //sendCommand(AmbilightPixelLeft3, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 4: {
                                //sendCommand(AmbilightPixelLeft4, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 5: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 6: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 7: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 8: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                }
            }
            if (i > lenPat){
                switch(j) {
                    case 1: {   
                                //sendCommand(AmbilightPixelLeft1, "10.0,10,1")
                                logInfo("openhab", "light OFF:" + j.toString) 
                        }
                    case 2: {
                                //sendCommand(AmbilightPixelLeft2, "10.0,10,1")
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 3: {
                                //sendCommand(AmbilightPixelLeft3, "10.0,10,1")
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 4: {
                                //sendCommand(AmbilightPixelLeft4, "0,0,0")
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 5: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 6: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 7: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 8: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                }
                j += 1
            }
        }
        timer.reschedule(now.plusMillis(1000))
        i += 1
    ])
end

