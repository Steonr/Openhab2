//TIMERS
//var Timer timer
//VARIABLES
//read-only
val int ledTV = 8
val int lenPat = 8
//VARIABLES
var int i
var int j
var int iter

rule "TEST Send"
when 
    Item dummy changed to ON
then
    var String text
    text = "Hello world"
    sendCommand(UDPSend, text)
    logInfo("openhab", "send message "+ text)
end

rule "Read string"
when
    Item UDPReceive changed 
then
    var String text = UDPReceive.state.toString()
    logInfo("openhab", "UDP Received message: "+ text)
    sendCommand(UDPSend, text)
end
/*
rule "Start Pattern"
when
    Item startPattern changed to ON
then
    iter = ledTV + lenPat
    logInfo("openhab", "beginning of rule") 
    //sendCommand(AmbilightAll, "1.0,1,100")
    i = 1
    j = 1
    timer = createTimer(now, [ |
        if(i<=iter){
            if (i<=ledTV) {
                switch(i) {
                    case 1: {   //sendCommand(AmbilightPixelLeft1, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString) 
                        }
                    case 2: {
                                //sendCommand(AmbilightPixelLeft2, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 3: {
                                //sendCommand(AmbilightPixelLeft3, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 4: {
                                //sendCommand(AmbilightPixelLeft4, colorSettings.state.toString)
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 5: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 6: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 7: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                    case 8: {
                                logInfo("openhab", "light ON:" + i.toString)
                        }
                }
            }
            if (i>lenPat){
                switch(j) {
                    case 1: {   
                                //sendCommand(AmbilightPixelLeft1, "10.0,10,1")
                                logInfo("openhab", "light OFF:" + j.toString) 
                        }
                    case 2: {
                                //sendCommand(AmbilightPixelLeft2, "10.0,10,1")
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 3: {
                                //sendCommand(AmbilightPixelLeft3, "10.0,10,1")
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 4: {
                                //sendCommand(AmbilightPixelLeft4, "0,0,0")
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 5: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 6: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 7: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                    case 8: {
                                logInfo("openhab", "light OFF:" + j.toString)
                        }
                }
                j+=1
            }
        }
        timer.reschedule(now.plusMillis(1000))
        i+=1
    ])
end
*/
rule "Show pattern color"
when
    Item colorSettings changed 
then
    logInfo("openhab", "Color = " + colorSettings.state.toString)
end
